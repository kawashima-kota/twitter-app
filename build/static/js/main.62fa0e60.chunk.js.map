{"version":3,"sources":["features/userSlice.ts","firebase/config.ts","firebase/index.ts","components/TweetInput.tsx","components/Post.tsx","components/Feed.tsx","components/Auth.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","components/Post.module.css","components/TweetInput.module.css","components/Auth.module.css","App.module.css","components/Feed.module.css"],"names":["userSlice","createSlice","name","initialState","user","uid","photoUrl","displayName","reducers","login","state","action","payload","logout","updateUserProfile","actions","selectUser","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","auth","storage","provider","GoogleAuthProvider","TweetInput","useSelector","useState","tweetImage","setTweetImage","tweetMsg","setTweetMsg","onSubmit","e","preventDefault","S","fileName","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","ref","put","on","TaskEvent","STATE_CHANGED","err","alert","message","a","child","getDownloadURL","then","url","collection","add","avatar","image","text","timestamp","FieldValue","serverTimestamp","username","className","styles","tweet_form","Avatar","tweet_avatar","src","onClick","signOut","tweet_input","placeholder","type","autoFocus","value","onChange","target","IconButton","tweet_addIconLoaded","tweet_addIcon","tweet_hiddenIcon","files","Button","disabled","tweet_sendBtn","tweet_sendDisableBtn","useStyles","makeStyles","theme","small","width","spacing","height","marginRight","Post","props","classes","comment","setComment","id","comments","setComments","openComments","setOpenComments","useEffect","unSub","doc","postId","orderBy","onSnapshot","snapshot","docs","data","post","post_avatar","post_body","post_header","post_headerUser","post_headerTime","Date","toDate","toLocaleString","post_tweet","post_tweetImage","alt","post_commentIcon","com","post_comment","post_commentUser","post_commentText","post_input","post_button","post_buttonDisable","post_sendIcon","Feed","posts","setPosts","feed","root","backgroundImage","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","paper","margin","display","flexDirection","alignItems","secondary","main","form","marginTop","submit","modal","outline","position","borderRadius","boxShadow","shadows","padding","Auth","dispatch","useDispatch","signInGoogle","signInWithPopup","catch","email","setEmail","password","setPassword","isLogin","setIsLogin","setUsername","avatarImage","setAvatarImage","React","openModal","setOpenModal","resetEmail","setResetEmail","sendResetEmail","sendPasswordResetEmail","signInEmail","signInWithEmailAndPassword","signUpEmail","createUserWithEmailAndPassword","authUser","randomChar","updateProfile","photoURL","Grid","container","component","CssBaseline","item","xs","sm","md","Paper","elevation","square","Typography","variant","noValidate","TextField","required","fullWidth","label","autoComplete","Box","textAlign","fontSize","login_addIconLoaded","login_addIcon","login_hiddenIcon","color","startIcon","login_reset","login_toggleMode","Modal","open","onClose","style","top","left","transform","login_modal","InputLabelProps","shrink","App","onAuthStateChanged","app","store","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","module","exports"],"mappings":"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","file":"static/js/main.62fa0e60.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\n\ninterface USER {\n  displayName: string;\n  photoUrl: string;\n}\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: { uid: \"\", photoUrl: \"\", displayName: \"\" }\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = { uid: \"\", photoUrl: \"\", displayName: \"\" };\n    },\n    updateUserProfile: (state, action: PayloadAction<USER>) => {\n      state.user.displayName = action.payload.displayName;\n      state.user.photoUrl = action.payload.photoUrl;\n    },\n  }\n});\n\nexport const { login, logout , updateUserProfile} = userSlice.actions;\n\nexport const selectUser = (state: RootState) => state.user.user;\n\nexport default userSlice.reducer;\n","const firebaseConfig = {\n  apiKey: \"AIzaSyAiCYCfpwIIsadNgRN3xFbn3u6RLHgF_oI\",\n  authDomain: \"reading-recoder.firebaseapp.com\",\n  databaseURL: \"https://reading-recoder.firebaseio.com\",\n  projectId: \"reading-recoder\",\n  storageBucket: \"reading-recoder.appspot.com\",\n  messagingSenderId: \"177752633329\",\n  appId: \"1:177752633329:web:9759a577e3e8e91919de50\",\n  measurementId: \"G-WXMGVJSP95\"\n};\n\nexport default firebaseConfig;","import firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth'\nimport \"firebase/storage\";\nimport firebaseConfig from \"./config\"\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();\nexport const auth = firebase.auth();\nexport const storage = firebase.storage();\nexport const provider = new firebase.auth.GoogleAuthProvider();","import React ,{useState} from 'react'\nimport styles from \"./TweetInput.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport {auth,storage,db} from \"../firebase/index\"\nimport { Avatar, Button, IconButton } from \"@material-ui/core\";\nimport firebase from \"firebase/app\"\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\n\nconst TweetInput:React.FC = () => {\n  const user = useSelector(selectUser);\n  const [tweetImage, setTweetImage] = useState<File | null>(null);\n  const [tweetMsg, setTweetMsg] = useState(\"\");\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setTweetImage(e.target.files![0]);\n      e.target.value = \"\";\n    }\n  };\n  const sendTweet = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if(tweetImage){\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + tweetImage.name;\n      const uploadTweetImg = storage.ref(`images/${fileName}`).put(tweetImage);\n      uploadTweetImg.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        //進捗\n        () => {},\n        //エラー処理\n        (err) => {\n          alert(err.message);\n        },\n        //正常終了時\n        async () => {\n          //storageからユーザーの画像を取得してデータをデータベースに格納\n          await storage\n            .ref(\"images\")\n            .child(fileName)\n            .getDownloadURL()\n            .then(async (url) => {\n              await db.collection(\"posts\").add({\n                avatar: user.photoUrl,\n                image: url,\n                text: tweetMsg,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                username: user.displayName,\n              });\n            });\n        }\n      );\n    }else{\n      db.collection(\"posts\").add({\n        avatar: user.photoUrl,\n        image:\"\",\n        text:tweetMsg,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        username: user.displayName,\n      })\n    }\n    setTweetImage(null);\n    setTweetMsg(\"\");\n  }\n\n  return (\n    <>\n      <form onSubmit={sendTweet}>\n        <div className={styles.tweet_form}>\n          <Avatar\n              className={styles.tweet_avatar}\n              src={user.photoUrl}\n              onClick={async () => {\n                await auth.signOut();\n              }}\n            />\n          <input\n            className={styles.tweet_input}\n            placeholder=\"What's happening?\"\n            type=\"text\"\n            autoFocus\n            value={tweetMsg}\n            onChange={(e) => setTweetMsg(e.target.value)}\n          />\n          <IconButton>\n            <label>\n              <AddAPhotoIcon\n                className={\n                  tweetImage ? styles.tweet_addIconLoaded : styles.tweet_addIcon\n                }\n              />\n              <input\n                className={styles.tweet_hiddenIcon}\n                type=\"file\"\n                onChange={onChangeImageHandler}\n              />\n            </label>\n          </IconButton>\n        </div>\n        <Button\n          type=\"submit\"\n          disabled={!tweetMsg}\n          className={\n            tweetMsg ? styles.tweet_sendBtn : styles.tweet_sendDisableBtn\n          }\n        >\n          Tweet\n        </Button>\n      </form>\n    </>\n  )\n}\n\nexport default TweetInput\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./Post.module.css\";\nimport { db } from \"../firebase/index\";\nimport firebase from \"firebase/app\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { Avatar } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MessageIcon from \"@material-ui/icons/Message\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\ninterface PROPS {\n  postId: string;\n  avatar: string;\n  image: string;\n  text: string;\n  timestamp: any;\n  username: string;\n}\n\ninterface COMMENT {\n  id: string;\n  avatar: string;\n  text: string;\n  timestamp: any;\n  username: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst Post: React.FC<PROPS> = props => {\n  const classes = useStyles();\n  const user = useSelector(selectUser);\n  //投稿に対するコメントを管理するstate\n  const [comment, setComment] = useState(\"\");\n  //表示させるコメントを管理するstate\n  const [comments, setComments] = useState<COMMENT[]>([\n    {\n      id:\"\",\n      avatar: \"\",\n      text: \"\",\n      timestamp: null,\n      username: \"\"\n    }\n  ])\n  const [openComments, setOpenComments] = useState(false);\n\n  //表示するコメントをfirestoreから取得\n  useEffect(() => {\n    const unSub = db\n      .collection(\"posts\")\n      .doc(props.postId)\n      .collection(\"comments\")\n      //投稿日時の順で取得する\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setComments(\n          //フィールドの属性へのアクセスにはdata()を挟む\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            avatar: doc.data().avatar,\n            text: doc.data().text,\n            username: doc.data().username,\n            timestamp: doc.data().timestamp,\n          }))\n        );\n      });\n\n    return () => {\n      unSub();\n    };\n  }, [props.postId]);\n\n  const newComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    db.collection(\"posts\")\n      .doc(props.postId)\n      .collection(\"comments\")\n      .add({\n        avatar: user.photoUrl,\n        text: comment,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        username: user.displayName\n      });\n    setComment(\"\");\n  };\n\n  return (\n    <div className={styles.post}>\n      <div className={styles.post_avatar}>\n        <Avatar src={props.avatar} />\n      </div>\n      <div className={styles.post_body}>\n        <div>\n          <div className={styles.post_header}>\n            <h3>\n              <span className={styles.post_headerUser}>@{props.username}</span>\n              <span className={styles.post_headerTime}>\n                {new Date(props.timestamp?.toDate()).toLocaleString()}\n              </span>\n            </h3>\n          </div>\n          <div className={styles.post_tweet}>\n            <p>{props.text}</p>\n          </div>\n        </div>\n        {props.image && (\n          <div className={styles.post_tweetImage}>\n            <img src={props.image} alt=\"tweet\" />\n          </div>\n        )}\n\n        <MessageIcon\n          className={styles.post_commentIcon}\n          onClick={() => setOpenComments(!openComments)}\n        />\n\n        { openComments &&  (\n          <>\n            {comments.map((com) => (\n            <div key={com.id} className={styles.post_comment}>\n              <Avatar src={com.avatar} className={classes.small} />\n\n              <span className={styles.post_commentUser}>@{com.username}</span>\n              <span className={styles.post_commentText}>{com.text} </span>\n              <span className={styles.post_headerTime}>\n                {new Date(com.timestamp?.toDate()).toLocaleString()}\n              </span>\n            </div>\n          ))}\n\n          <form onSubmit={newComment}>\n            <div className={styles.post_input}>\n              <input\n                className={styles.post_input}\n                type=\"text\"\n                placeholder=\"Type new comment...\"\n                value={comment}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setComment(e.target.value)\n                }\n              />\n              <button\n                disabled={!comment}\n                className={\n                  comment ? styles.post_button : styles.post_buttonDisable\n                }\n                type=\"submit\"\n              >\n                <SendIcon className={styles.post_sendIcon} />\n              </button>\n            </div>\n          </form>\n        </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React,{useState,useEffect} from \"react\";\nimport {db} from \"../firebase/index\"\nimport TweetInput from \"./TweetInput\";\nimport styles from \"./Feed.module.css\"\nimport Post from \"./Post\";\n\nconst Feed :React.FC= () => {\n  const [posts,setPosts] = useState([\n    {\n      id:\"\",\n      avatar:\"\",\n      image:\"\",\n      text:\"\",\n      timestamp:null,\n      username:\"\"\n    }\n  ]);\n\n  //マウント時に一回実行\n  useEffect(() => {\n    const unSub = db\n      .collection(\"posts\")\n      //タイムスタンプの降順で並べ替える\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            avatar: doc.data().avatar,\n            image: doc.data().image,\n            text: doc.data().text,\n            timestamp: doc.data().timestamp,\n            username: doc.data().username,\n          }))\n        )\n      );\n    return () => {\n      unSub();\n    };\n  }, []);\n\n  return(\n    <div className={styles.feed}>\n      <TweetInput />\n      {posts[0]?.id && (\n        <>\n          {/* dbから受け取ったデータをPostコンポーネントを用いて展開 */}\n          {posts.map((post)=>{\n            return <Post \n            key={post.id}\n            postId={post.id} \n            avatar={post.avatar} \n            image={post.image}\n            text={post.text}\n            timestamp={post.timestamp}\n            username={post.username}\n            />\n          })}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n","import React, { useState } from \"react\";\nimport styles from \"./Auth.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { updateUserProfile } from \"../features/userSlice\";\nimport { auth, provider, storage } from \"../firebase/index\";\n\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Paper,\n  Grid,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box\n} from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CameraIcon from \"@material-ui/icons/Camera\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\"\n  },\n  image: {\n    backgroundImage:\n      \"url(https://images.unsplash.com/photo-1581784368651-8916092072cf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  modal: {\n    outline: \"none\",\n    position: \"absolute\",\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: \"white\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  },\n}));\n\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch(err => alert(err.message));\n  };\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [username, setUsername] = useState(\"\");\n  const [avatarImage, setAvatarImage] = useState<File | null>(null);\n  const [openModal, setOpenModal] = React.useState(false);\n  const [resetEmail, setResetEmail] = useState(\"\");\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0]);\n      e.target.value = \"\";\n    }\n  };\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then(() => {\n        setOpenModal(false);\n        setResetEmail(\"\");\n        alert(\"パスワードの再設定用のメールを送信しました。\")\n      })\n      .catch(err => {\n        alert(err.message);\n        setResetEmail(\"\");\n      });\n  };\n\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password);\n  };\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password);\n    let url = \"\";\n    if (avatarImage) {\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map(n => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + avatarImage.name;\n      await storage.ref(`avatars/${fileName}`).put(avatarImage);\n      url = await storage\n        .ref(\"avatars\")\n        .child(fileName)\n        .getDownloadURL();\n    }\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url\n    });\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoUrl: url\n      })\n    );\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  id=\"username\"\n                  label=\"Username\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setUsername(e.target.value);\n                  }}\n                />\n                <Box textAlign=\"center\">\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        className={\n                          avatarImage\n                            ? styles.login_addIconLoaded\n                            : styles.login_addIcon\n                        }\n                      />\n                      <input\n                        className={styles.login_hiddenIcon}\n                        type=\"file\"\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setEmail(e.target.value);\n              }}\n            />\n\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <Button\n              disabled={\n                isLogin\n                  ? !email || password.length < 6\n                  : !username || !email || password.length < 6 || !avatarImage\n              }\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<EmailIcon />}\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n              }\n            >\n              {isLogin ? \"Login\" : \"Register\"}\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span\n                  className={styles.login_reset}\n                  onClick={() => {\n                    setOpenModal(true);\n                  }}\n                >\n                  Forgot Password ?\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  className={styles.login_toggleMode}\n                  onClick={() => setIsLogin(!isLogin)}\n                >\n                  {isLogin ? \"Create new account ?\" : \"Back to login\"}\n                </span>\n              </Grid>\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CameraIcon />}\n              className={classes.submit}\n              onClick={signInGoogle}\n            >\n              Sign In with Google\n            </Button>\n          </form>\n\n          <Modal open={openModal} onClose={() => setOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div className={styles.login_modal}>\n                <TextField\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Reset E-mail\"\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value);\n                  }}\n                />\n                <IconButton onClick={\n                  sendResetEmail\n                }>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Auth;\n","import React, { useEffect } from \"react\";\r\nimport styles from \"./App.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport { auth } from \"./firebase/index\";\r\nimport Feed from \"./components/Feed\";\r\nimport Auth from \"./components/Auth\";\r\n\r\nconst App: React.FC = () => {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unSub = auth.onAuthStateChanged(authUser => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photoUrl: authUser.photoURL,\r\n            displayName: authUser.displayName\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    return () => {\r\n      unSub();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {user.uid ? (\r\n        <div className={styles.app}>\r\n          <Feed />\r\n        </div>\r\n      ) : (\r\n        <Auth />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__hw-08\",\"post_avatar\":\"Post_post_avatar__1cYoN\",\"post_body\":\"Post_post_body__1xeAk\",\"post_header\":\"Post_post_header__3aAYF\",\"post_headerUser\":\"Post_post_headerUser__1GBNh\",\"post_headerTime\":\"Post_post_headerTime__1NrXF\",\"post_tweet\":\"Post_post_tweet__2MCoD\",\"post_tweetImage\":\"Post_post_tweetImage__1Wriu\",\"post_commentIcon\":\"Post_post_commentIcon__smd2E\",\"post_comment\":\"Post_post_comment__3i52D\",\"post_commentUser\":\"Post_post_commentUser__2cSFm\",\"post_commentText\":\"Post_post_commentText__116jQ\",\"post_form\":\"Post_post_form__1fvdV\",\"post_input\":\"Post_post_input__2fPS9\",\"post_button\":\"Post_post_button__NDp-z\",\"post_buttonDisable\":\"Post_post_buttonDisable__3TRyO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweet_form\":\"TweetInput_tweet_form__1rtT-\",\"tweet_avatar\":\"TweetInput_tweet_avatar__2yWKC\",\"tweet_input\":\"TweetInput_tweet_input__2x3uw\",\"tweet_addIcon\":\"TweetInput_tweet_addIcon___KnyW\",\"tweet_addIconLoaded\":\"TweetInput_tweet_addIconLoaded__20MoG\",\"tweet_hiddenIcon\":\"TweetInput_tweet_hiddenIcon__2E99F\",\"tweet_sendBtn\":\"TweetInput_tweet_sendBtn__2KG_v\",\"tweet_sendDisableBtn\":\"TweetInput_tweet_sendDisableBtn__3VOVb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_toggleMode\":\"Auth_login_toggleMode__1GcmO\",\"login_modal\":\"Auth_login_modal__3OgR1\",\"login_reset\":\"Auth_login_reset__35RJ3\",\"login_hiddenIcon\":\"Auth_login_hiddenIcon__26KOs\",\"login_addIcon\":\"Auth_login_addIcon__2Uq9h\",\"login_addIconLoaded\":\"Auth_login_addIconLoaded__n83Lx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed\":\"Feed_feed__1VDlB\"};"],"sourceRoot":""}