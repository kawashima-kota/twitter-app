{"ast":null,"code":"var _jsxFileName = \"/Users/kawashimakouta/Desktop/react-projects/twitter-app/src/components/Feed.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/index\";\nimport TweetInput from \"./TweetInput\";\nimport styles from \"./Feed.module.css\";\nimport Post from \"./Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Feed = () => {\n  _s();\n\n  var _posts$;\n\n  const [posts, setPosts] = useState([{\n    id: \"\",\n    avatar: \"\",\n    image: \"\",\n    text: \"\",\n    timestamp: null,\n    username: \"\"\n  }]); //マウント時に一回実行\n\n  useEffect(() => {\n    const unSub = db.collection(\"posts\") //タイムスタンプの降順で並べ替える\n    .orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => setPosts(snapshot.docs.map(doc => ({\n      id: doc.id,\n      avatar: doc.data().avatar,\n      image: doc.data().image,\n      text: doc.data().text,\n      timestamp: doc.data().timestamp,\n      username: doc.data().username\n    }))));\n    return () => {\n      unSub();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.feed,\n    children: [/*#__PURE__*/_jsxDEV(TweetInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), ((_posts$ = posts[0]) === null || _posts$ === void 0 ? void 0 : _posts$.id) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          postId: post.id,\n          avatar: post.avatar,\n          image: post.image,\n          text: post.text,\n          timestamp: post.timestamp,\n          username: post.username\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Feed, \"anEbg0re3FZDG/bCGeWP6ik+Rok=\");\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/kawashimakouta/Desktop/react-projects/twitter-app/src/components/Feed.tsx"],"names":["React","useState","useEffect","db","TweetInput","styles","Post","Feed","posts","setPosts","id","avatar","image","text","timestamp","username","unSub","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","feed","post"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,EAAR,QAAiB,mBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAEA,MAAMC,IAAc,GAAE,MAAM;AAAA;;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,CAChC;AACES,IAAAA,EAAE,EAAC,EADL;AAEEC,IAAAA,MAAM,EAAC,EAFT;AAGEC,IAAAA,KAAK,EAAC,EAHR;AAIEC,IAAAA,IAAI,EAAC,EAJP;AAKEC,IAAAA,SAAS,EAAC,IALZ;AAMEC,IAAAA,QAAQ,EAAC;AANX,GADgC,CAAD,CAAjC,CAD0B,CAY1B;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,KAAK,GAAGb,EAAE,CACbc,UADW,CACA,OADA,EAEZ;AAFY,KAGXC,OAHW,CAGH,WAHG,EAGU,MAHV,EAIXC,UAJW,CAICC,QAAD,IACVX,QAAQ,CACNW,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,GAAD,KAAU;AAC1Bb,MAAAA,EAAE,EAAEa,GAAG,CAACb,EADkB;AAE1BC,MAAAA,MAAM,EAAEY,GAAG,CAACC,IAAJ,GAAWb,MAFO;AAG1BC,MAAAA,KAAK,EAAEW,GAAG,CAACC,IAAJ,GAAWZ,KAHQ;AAI1BC,MAAAA,IAAI,EAAEU,GAAG,CAACC,IAAJ,GAAWX,IAJS;AAK1BC,MAAAA,SAAS,EAAES,GAAG,CAACC,IAAJ,GAAWV,SALI;AAM1BC,MAAAA,QAAQ,EAAEQ,GAAG,CAACC,IAAJ,GAAWT;AANK,KAAV,CAAlB,CADM,CALE,CAAd;AAgBA,WAAO,MAAM;AACXC,MAAAA,KAAK;AACN,KAFD;AAGD,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAEX,MAAM,CAACoB,IAAvB;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,YAAAjB,KAAK,CAAC,CAAD,CAAL,oDAAUE,EAAV,kBACC;AAAA,gBAEGF,KAAK,CAACc,GAAN,CAAWI,IAAD,IAAQ;AACjB,4BAAO,QAAC,IAAD;AAEP,UAAA,MAAM,EAAEA,IAAI,CAAChB,EAFN;AAGP,UAAA,MAAM,EAAEgB,IAAI,CAACf,MAHN;AAIP,UAAA,KAAK,EAAEe,IAAI,CAACd,KAJL;AAKP,UAAA,IAAI,EAAEc,IAAI,CAACb,IALJ;AAMP,UAAA,SAAS,EAAEa,IAAI,CAACZ,SANT;AAOP,UAAA,QAAQ,EAAEY,IAAI,CAACX;AAPR,WACFW,IAAI,CAAChB,EADH;AAAA;AAAA;AAAA;AAAA,gBAAP;AASD,OAVA;AAFH,qBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxDD;;GAAMH,I;;KAAAA,I;AA0DN,eAAeA,IAAf","sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport {db} from \"../firebase/index\"\nimport TweetInput from \"./TweetInput\";\nimport styles from \"./Feed.module.css\"\nimport Post from \"./Post\";\n\nconst Feed :React.FC= () => {\n  const [posts,setPosts] = useState([\n    {\n      id:\"\",\n      avatar:\"\",\n      image:\"\",\n      text:\"\",\n      timestamp:null,\n      username:\"\"\n    }\n  ]);\n\n  //マウント時に一回実行\n  useEffect(() => {\n    const unSub = db\n      .collection(\"posts\")\n      //タイムスタンプの降順で並べ替える\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            avatar: doc.data().avatar,\n            image: doc.data().image,\n            text: doc.data().text,\n            timestamp: doc.data().timestamp,\n            username: doc.data().username,\n          }))\n        )\n      );\n    return () => {\n      unSub();\n    };\n  }, []);\n\n  return(\n    <div className={styles.feed}>\n      <TweetInput />\n      {posts[0]?.id && (\n        <>\n          {/* de */}\n          {posts.map((post)=>{\n            return <Post \n            key={post.id}\n            postId={post.id} \n            avatar={post.avatar} \n            image={post.image}\n            text={post.text}\n            timestamp={post.timestamp}\n            username={post.username}\n            />\n          })}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}